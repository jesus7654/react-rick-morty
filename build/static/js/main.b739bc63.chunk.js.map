{"version":3,"sources":["component/cardList.js","pages/Home.js","pages/Detalle.js","App.js","serviceWorker.js","index.js"],"names":["CardList","state","result","tipo","fetch","then","res","json","setState","this","props","_fetchEpisode","Grid","container","className","spacing","length","results","map","value","to","id","key","image","src","alt","name","Component","Home","search","Resultado","_handlerChange","e","target","_submitForm","preventDefault","_cards","_cardsResult","episode","Container","onSubmit","InputBase","placeholder","inputProps","onChange","IconButton","type","aria-label","Detalle","detail","match","params","detalle","species","gender","status","Button","variant","color","air_date","_fetchDetalle","_showEpisodio","_showPersonaje","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b739bc63.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst URL_API=\"https://rickandmortyapi.com/api/\";\r\n\r\n\r\nexport class CardList extends Component{\r\n\r\n    state={\r\n        result:[]\r\n    }\r\n    _fetchEpisode(tipo){\r\n        fetch(`${URL_API}${tipo}/`)\r\n            .then(res => res.json())\r\n            .then(result=>{\r\n                this.setState({result:result});\r\n            })\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const {tipo} = this.props;\r\n        this._fetchEpisode(tipo);\r\n    }\r\n    \r\n     render()\r\n    {\r\n        const {tipo} = this.props;\r\n\r\n        const {result} = this.state;\r\n        return(\r\n            <Grid container className=\"cards\" spacing={2}>\r\n                <Grid container  spacing={2}>\r\n                {\r\n                    result.length === 0  ?\r\n                    \"\" \r\n                    : \r\n                    result.results.map(value=>(\r\n                        <Link to={`/detalle/${value.id}/${tipo}`} key={value.id}  className=\"cardWrap\">\r\n                            {value.image ? <img src={value.image} alt={value.name} /> : \"\"}\r\n                            <h2>{value.name}</h2>\r\n                        </Link>\r\n                        ))\r\n\r\n                }\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {CardList} from '../component/cardList';\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { Container } from '@material-ui/core';\r\n\r\nimport {InputBase,IconButton,Grid} from '@material-ui/core';\r\n\r\nconst URL_API=\"https://rickandmortyapi.com/api/\";\r\n\r\nexport class Home extends Component{\r\n\r\n    state ={\r\n        search:'',\r\n        Resultado:[]\r\n    }\r\n\r\n\r\n    _handlerChange=(e)=>{\r\n    this.setState({search:e.target.value});\r\n    }\r\n    \r\n    _submitForm = (e) =>{\r\n       e.preventDefault();\r\n       fetch(`${URL_API}/character/?name=${this.state.search}`)\r\n         .then(res => res.json())\r\n         .then(result=>{\r\n            this.setState({Resultado:result.results})\r\n         })\r\n    }\r\n    \r\n    _cards=()=>{\r\n    \r\n       return (\r\n         <div>\r\n    \r\n           <hr />\r\n           <h2>Episodios</h2>\r\n           <CardList tipo=\"episode\" />\r\n           <br />\r\n           <hr />\r\n           <h2>Personajes</h2>\r\n           <CardList tipo=\"character\" />\r\n         </div>\r\n       )\r\n    }\r\n    _cardsResult=()=>{\r\n       return(\r\n         <Grid container className=\"cards\" spacing={2}>\r\n               <Grid container  spacing={2}>\r\n                 {\r\n                    this.state.Resultado.map(value => (\r\n                     <Link to={`/detalle/${value.id}/character`} key={value.id} className=\"cardWrap\">\r\n                       <img src={value.image} alt={value.name}/>\r\n                       <h2>{value.name}</h2>\r\n                       <p>Episodios: <span>{value.episode.length}</span></p>\r\n                     </Link>\r\n                   ))\r\n                 }\r\n               </Grid>\r\n         </Grid>\r\n       )\r\n    }\r\n    render(){\r\n        return(\r\n            <Container className=\"App\">\r\n            <h1  > Rick & Morty </h1>\r\n            <form onSubmit={this._submitForm} className=\"root\">\r\n                <InputBase\r\n                className=\"input\"\r\n                placeholder=  \"Buscar...\"\r\n                inputProps={{ 'aria-label': 'Buscador' }}\r\n                onChange={this._handlerChange}\r\n                />\r\n                <IconButton type=\"submit\" className=\"iconButton\" aria-label=\"search\">\r\n                <SearchIcon />\r\n                </IconButton>\r\n            </form>\r\n            <div className=\"containerCard\">\r\n                    {\r\n                        this.state.Resultado.length===0 ?\r\n                        this._cards()\r\n                        :\r\n                        this._cardsResult()\r\n                    }\r\n                \r\n            </div>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {Button} from '@material-ui/core';\r\n\r\n\r\n\r\n\r\nconst URL_API=\"https://rickandmortyapi.com/api/\";\r\n\r\nexport class Detalle extends Component{\r\n    static propTypes = {\r\n        match: PropTypes.shape({\r\n            params: PropTypes.object,\r\n            isExact: PropTypes.bool,\r\n            path: PropTypes.string,\r\n            url: PropTypes.string\r\n        })\r\n    }\r\n\r\n    state ={\r\n        detail:{}\r\n    }\r\n\r\n    _fetchDetalle(){\r\n        const {id,tipo} =this.props.match.params;\r\n        fetch(`${URL_API}/${tipo}/${id}`)\r\n        .then(result => result.json())\r\n        .then(detalle =>{\r\n            this.setState({detail:detalle});\r\n        })\r\n    }\r\n\r\n    _showPersonaje(){\r\n        const {detail} = this.state;\r\n        return (\r\n            <div>\r\n                <hr />\r\n                <img src={detail.image} alt={detail.name}></img>\r\n                <h2>{detail.name}</h2>\r\n                <hr />\r\n                <p><strong>Especie:</strong><span>{detail.species}</span></p>\r\n                <p><strong>Genero:</strong><span>{detail.gender}</span></p>\r\n                <p><strong>Estatus</strong><span>{detail.status}</span></p>\r\n                <hr />\r\n                <Link to=\"/\" className=\"link\">\r\n                    <Button variant=\"contained\" color=\"primary\">Volvera la Portada</Button>\r\n                </Link>\r\n\r\n            </div>\r\n            )\r\n    }\r\n\r\n    _showEpisodio(){\r\n        const {detail} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <hr />\r\n                    <h2>{detail.name}</h2>\r\n                <hr />\r\n                    <p><strong>Fecha de lanzamiento:</strong> <span>{detail.air_date}</span></p>\r\n                    <p><strong>Episodio:</strong> <span>{detail.episode}</span></p>\r\n                <hr />\r\n                    <Link to=\"/\" className=\"link\">\r\n                        <Button variant=\"contained\" color=\"primary\">Volvera la Portada</Button>\r\n                    </Link>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._fetchDetalle();\r\n    }\r\n\r\n    \r\n    render(){\r\n        const {tipo} =this.props.match.params;\r\n\r\n        return(\r\n            <div >\r\n               { tipo===\"episode\" ? this._showEpisodio() : this._showPersonaje()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\n\nimport {Switch, Route} from 'react-router-dom';\n\nimport {Home} from './pages/Home';\nimport {Detalle} from './pages/Detalle';\n\n\n\n\nfunction App() {\n\n   return (\n    <div className=\"App\">\n      <Switch>\n        <Route  exact path='/' component={Home} />\n        <Route path='/detalle/:id/:tipo' component={Detalle} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(    \n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}